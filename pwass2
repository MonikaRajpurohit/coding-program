{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"history_visible":true,"authorship_tag":"ABX9TyMBEKzHrz/JSqd+JFlYMSKD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Q1 WRITE A CODE TO REVERSE A STRING .\n","\n"," ANS: here is the example of reversing the string"],"metadata":{"id":"33pB88POMGqT"}},{"cell_type":"code","source":["def rev(a):\n","   return a[::-1]\n","   #call the function and provide an argument:\n","   t=\"hello\"\n","   s=(rev(t))\n","   print(s)"],"metadata":{"id":"sQIH7z1SsdwW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Q2.Write a code to count the number of vowels in a string  \n","ANS :"],"metadata":{"id":"Cal12akXsent"}},{"cell_type":"code","source":["def s_vowel(str):\n","  vowel=\"aeiouAEIOU\"\n","  c=0\n","  for char in str:\n","   if char in vowel:\n","    c=c+1\n","    return c\n","\n","\n","   test_str='heil_hho'\n","  print(s_vowel(test_str))\n","   # output :3\n"],"metadata":{"id":"23qJt8Vo6tP_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Q3 Write a code to check if a given string is a palindrome or not"],"metadata":{"id":"unBskvP9-zAU"}},{"cell_type":"code","source":["def palindrome(string):\n","    s = ''.join(i for i in string if i.isalnum()).lower()\n","    if s == s[::-1]:\n","        return \"It's a palindrome.\"\n","    else:\n","        return \"It's not a palindrome.\"\n","\n","t = \"ma'am\"\n","print(palindrome(t))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pj8Q1BKABK5U","executionInfo":{"status":"ok","timestamp":1735218536943,"user_tz":-330,"elapsed":378,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"1c2084cd-d692-4366-f5ea-1c68fb73eeaf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["It's a palindrome.\n"]}]},{"cell_type":"markdown","source":["Q4 Write a code to check if two given strings are anagrams of each other"],"metadata":{"id":"Joym1zEuFd4g"}},{"cell_type":"code","source":["def are_anagrams(string1, string2):\n","  string1=''.join(i for i in string1 if i.isalnum ()).lower()\n","  string2=''.join( i for i in string2 if i.isalnum ()).lower()\n","\n","  return sorted(string1) == sorted(string2)\n","\n","\n","string1 = \"Listen\"\n","string2 = \"Silent\"\n","print(are_anagrams(string1, string2))\n","\n","string1 = \"ate\"\n","string2 = \"eat\"\n","print(are_anagrams(string1, string2))\n","  # Output: False (incorrect)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pU4gRPhfGzTJ","executionInfo":{"status":"ok","timestamp":1735234131469,"user_tz":-330,"elapsed":434,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"7e66bc2e-9c93-43ac-eab9-4f1b006eab20"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","True\n"]}]},{"cell_type":"markdown","source":["Q5. Write a code to find all occurrences of a given substring within another string"],"metadata":{"id":"6wmcJ2RrBHVy"}},{"cell_type":"code","source":["def find_substring_occurrences(main_string, substring):\n","    return [i for i in range(len(main_string)) if main_string.startswith(substring, i)]\n","main_string = \"hyyy hyyy  hhhyyyyyyy\"\n","substring = \"hyyy\"\n","print(find_substring_occurrences(main_string, substring))\n"," # Output: [0, 5, 13]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_8UrjxJ2D4vN","executionInfo":{"status":"ok","timestamp":1735235020075,"user_tz":-330,"elapsed":426,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"78c5c4f2-cafb-4c74-be58-5ca6489ad1a1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0, 5, 13]\n"]}]},{"cell_type":"markdown","source":["Q6 Write a code to determine if a string has all unique characters"],"metadata":{"id":"4KvKGl7AEo19"}},{"cell_type":"code","source":["def u_char(s):\n","   return len(s)==len(set(s))\n","   a = \"hello\"\n","   print(u_char(a))\n","   a1 = \"world\"\n","   print(u_char(a1))\n","   # output (false)\n","   # output  (true)"],"metadata":{"id":"dq1DZSwYIZ8V"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Q7 . Write a code to convert a given string to uppercase or lowercase"],"metadata":{"id":"69Q3FxBsKC9w"}},{"cell_type":"code","source":["def to_lower(s):\n"," return s.lower()\n"," a=\"HYY\"\n"," print(to_upper(a))\n","  # output : hyy"],"metadata":{"id":"1rJZlxKYK9Bs","executionInfo":{"status":"ok","timestamp":1735392208720,"user_tz":-330,"elapsed":41,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["Q9 . Write a code to count the number of words in a string.\n"," ans:"],"metadata":{"id":"OeTBRUUZLIzc"}},{"cell_type":"code","source":["def count_words(s):\n","    return len(s.split())\n","test_string = \"how are you today?\"\n","print(count_words(test_string))\n"," # Output: 4"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bv8FhydfLeis","executionInfo":{"status":"ok","timestamp":1735237156676,"user_tz":-330,"elapsed":426,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"dee3e246-5269-40e4-c66c-d1b1c956c530"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n"]}]},{"cell_type":"markdown","source":["Q10 . Write a code to concatenate two strings without using the + operator"],"metadata":{"id":"-IrMgpmJvb3m"}},{"cell_type":"code","source":["def con(str1,str2):\n","  return ''. join([str1,str2])\n","     # test\n","str1 =\"hyy\"\n","str2 =\"everyone\"\n","print(con(str1,str2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"viMLmcz2vjwA","executionInfo":{"status":"ok","timestamp":1735297589789,"user_tz":-330,"elapsed":694,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"751182fd-a544-4cd4-f684-a986abeea33f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["hyyeveryone\n"]}]},{"cell_type":"markdown","source":["Q11.Write a code to remove all occurrences of a specific element from a list"],"metadata":{"id":"n37f_hkMzFY9"}},{"cell_type":"code","source":["def occ(lst,ele):\n","  return [i for i in lst if i != ele]\n","l1=[1,23,4,4,2,5]\n","ele_to_remove= 4\n","print(occ(l1,ele_to_remove))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cQAr0Hlyzp8_","executionInfo":{"status":"ok","timestamp":1735298229540,"user_tz":-330,"elapsed":25,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"4a108293-e64f-458d-f62b-f00068fefa88"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 23, 2, 5]\n"]}]},{"cell_type":"markdown","source":["Q12. Implement a code to find the second largest number in a given list of integers"],"metadata":{"id":"E_rfnKRC1bab"}},{"cell_type":"code","source":["def second_largest(nums):\n","    u= list(set(nums))\n","    if len(u) < 2:\n","        return None\n","\n","    u.sort(reverse=True)\n","\n","    return u[1]  # here it will give 2 value after sorting the list\n","\n","t = [1, 3, 4, 5, 0, 2, 5, 4]\n","print(second_largest(t))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QlMcYICu2scY","executionInfo":{"status":"ok","timestamp":1735298938062,"user_tz":-330,"elapsed":442,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"f3f7814b-dbf4-4c83-9234-f08d5ec65059"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4\n"]}]},{"cell_type":"code","source":["Q13. Create a code to count the occurrences of each element in a list and return a dictionary with elements as\n","keys and their counts as values."],"metadata":{"id":"w5oZQ64S3FVy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def count_occurrences(lst):\n","    counts = {}\n","    for element in lst:\n","        if element in counts:\n","            counts[element] += 1\n","        else:\n","            counts[element] = 1\n","    return counts\n","\n","\n","test_list = [1, 2,4 ,3, 5, 3, 4, 8, 4, 4]\n","print(count_occurrences(test_list))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gk1Ns9pO66gQ","executionInfo":{"status":"ok","timestamp":1735300011099,"user_tz":-330,"elapsed":460,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"69aacde0-d13b-442b-8f02-11a8fb687085"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{1: 1, 2: 1, 4: 4, 3: 2, 5: 1, 8: 1}\n"]}]},{"cell_type":"markdown","source":["\n","\n","Q14 . Write a code to reverse a list in-place without using any built-in reverse functions."],"metadata":{"id":"aDeMPxv_8TIY"}},{"cell_type":"code","source":["def reverse_list(lst):\n","    left = 0\n","    right = len(lst) - 1\n","\n","    while left < right:\n","        # Swap the elements at the left and right pointers\n","        lst[left], lst[right] = lst[right], lst[left]\n","\n","        # Move the pointers towards the center\n","        left += 1\n","        right -= 1\n","\n","test_list = [1, 2, 3, 4, 5]\n","reverse_list(test_list)\n","print(test_list)\n"],"metadata":{"id":"q6AFeKl58ifk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Q15. Implement a code to find and remove duplicates from a list while preserving the original order of\n","elements"],"metadata":{"id":"GzCK_RyQ88Rl"}},{"cell_type":"code","source":["def remove_duplicates_preserve_order(lst):\n","    s = set()\n","    result = []\n","\n","    for i in lst:\n","        if i not in s:\n","            s.add(i)\n","            result.append(i)\n","\n","    return result\n","\n","# Test the function\n","test_list = [1, 2, 2, 3, 4, 4, 5, 1, 6, 7, 7, 8]\n","print(remove_duplicates_preserve_order(test_list))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mWSGcmuX_KOt","executionInfo":{"status":"ok","timestamp":1735300874799,"user_tz":-330,"elapsed":716,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"d8103d57-10c7-4601-d868-4c5dc7a3172d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, 6, 7, 8]\n"]}]},{"cell_type":"markdown","source":["q16. Create a code to check if a given list is sorted (either in ascending or descending order) or not"],"metadata":{"id":"9xZhAb_A_rkE"}},{"cell_type":"code","source":["def is_sorted(lst):\n","   asc = all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n","   desc = all(lst[i] >= lst[i + 1] for i in range(len(lst) - 1))\n","\n","   return asc or desc\n","\n","\n","test_list_ascending = [1, 2, 3, 4, 5]\n","test_list_descending = [5, 4, 3, 2, 1]\n","\n","\n","print(is_sorted(test_list_ascending))\n","print(is_sorted(test_list_descending))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N93aJEeGBb1w","executionInfo":{"status":"ok","timestamp":1735301540605,"user_tz":-330,"elapsed":484,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"f2c7a2fb-1a4b-4b4a-bcaf-462835b41a3e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n","True\n"]}]},{"cell_type":"markdown","source":["Q17 Write a code to merge two sorted lists into a single sorted list."],"metadata":{"id":"qb_ydK6QCGh9"}},{"cell_type":"code","source":["def merge_sorted_lists(list1, list2):\n","    merged_list = []\n","    i, j = 0, 0\n","\n","    while i < len(list1) and j < len(list2):\n","        if list1[i] <= list2[j]:\n","            merged_list.append(list1[i])\n","            i += 1\n","        else:\n","            merged_list.append(list2[j])\n","            j += 1\n","\n","    while i < len(list1):\n","        merged_list.append(list1[i])\n","        i += 1\n","\n","    while j < len(list2):\n","        merged_list.append(list2[j])\n","        j += 1\n","\n","    return merged_list\n","\n","# Test the function\n","sorted_list1 = [1, 3, 5, 7]\n","sorted_list2 = [2, 4, 6, 8]\n","print(merge_sorted_lists(sorted_list1, sorted_list2))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I4w_TiPuCPLy","executionInfo":{"status":"ok","timestamp":1735301858921,"user_tz":-330,"elapsed":606,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"ccf180cd-a9aa-4c95-b3ba-a836a28d55ef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, 6, 7, 8]\n"]}]},{"cell_type":"markdown","source":["Q18.Implement a code to find the intersection of two given lists"],"metadata":{"id":"-kfGExanDRyd"}},{"cell_type":"code","source":["def intersection(L1, L2):\n","    set1 = set(L1)\n","    set2 = set(L2)\n","    intersection = list(set1 & set2)\n","    return intersection\n","\n","# Test the function\n","l1 = [1, 2, 3, 4, 5]\n","l2 = [4, 5, 6, 7, 8]\n","print(intersection(l1, l2))\n","# Output: [4, 5]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IYroBMwbDyae","executionInfo":{"status":"ok","timestamp":1735302068234,"user_tz":-330,"elapsed":475,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"d5a4127d-63f6-4ced-8e0e-1e71b7cbc4aa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[4, 5]\n"]}]},{"cell_type":"markdown","source":["Q19.Create a code to find the union of two lists without duplicates"],"metadata":{"id":"5ukgjroyEeFo"}},{"cell_type":"code","source":["def union(L1, L2):\n","    set1 = set(L1)\n","    set2 = set(L2)\n","    union = list(set1 | set2)\n","    return union\n","\n","# Test the function\n","l1 = [1, 2, 3, 4, 5]\n","l2 = [4, 5, 6, 7, 8]\n","print(union(l1, l2))\n","# Output: [4, 5]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fSk2myrxEpqY","executionInfo":{"status":"ok","timestamp":1735302338433,"user_tz":-330,"elapsed":461,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"913e3d9f-1830-48aa-a85b-53b9e5d1f541"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, 6, 7, 8]\n"]}]},{"cell_type":"markdown","source":["Q20 Write a code to shuffle a given list randomly without using any built-in shuffle functions"],"metadata":{"id":"J-dig8KnFJFg"}},{"cell_type":"code","source":["import random\n","\n","def simple_shuffle(lst):\n","    for i in range(len(lst)):\n","\n","        r_index = random.randint(0, len(lst) - 1)\n","        lst[i], lst[r_index] = lst[r_index], lst[i]\n","\n","# Test the function\n","test_list = [1, 2, 3, 4, 5]\n","simple_shuffle(test_list)\n","print(test_list)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"93VuwhnVFO0s","executionInfo":{"status":"ok","timestamp":1735302589307,"user_tz":-330,"elapsed":505,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"624576f2-5f51-43d1-dd18-32591acced3e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 1, 5, 4, 2]\n"]}]},{"cell_type":"markdown","source":["Q21.Write a code that takes two tuples as input and returns a new tuple containing elements that are\n","common to both input tuples."],"metadata":{"id":"An-GxKjaGIaZ"}},{"cell_type":"code","source":["def common_elements(tuple1, tuple2):\n","    return tuple(set(tuple1) & set(tuple2))\n","\n","\n","tuple1 = (1, 2, 3, 4, 5)\n","tuple2 = (4, 5, 6, 7, 8)\n","print(common_elements(tuple1, tuple2))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xxtM-mfGG3dZ","executionInfo":{"status":"ok","timestamp":1735302863230,"user_tz":-330,"elapsed":461,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"e7bb4c9b-407a-45e4-fba9-d7490c4d598d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(4, 5)\n"]}]},{"cell_type":"markdown","source":["Q22.Create a code that prompts the user to enter two sets of integers separated by commas. Then, print the\n","intersection of these two sets\n"],"metadata":{"id":"a61AXKT1HJfZ"}},{"cell_type":"code","source":["def  set(t):\n","    user_input = input(t)\n","    return set(map(int, user_input.split(',')))\n","\n","def main():\n","    set1 = set(\"Enter the first set of integers : \")\n","    set2 = set(\"Enter the second set of integers : \")\n","\n","    intersection = set1 & set2\n","    print(f\"The intersection of the two sets is: {intersection}\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"ynE7axB5JY7n"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Q23 Write a code to concatenate two tuples. The function should take two tuples as input and return a new\n","tuple containing elements from both input tuples."],"metadata":{"id":"znaQJVqZJq2s"}},{"cell_type":"code","source":["def concatenate(tuple1, tuple2):\n","    return tuple1 + tuple2\n","\n","# Test the function\n","tuple1 = (1, 2, 3)\n","tuple2 = (4, 5, 6)\n","print(concatenate(tuple1, tuple2))\n","\n"],"metadata":{"id":"rtjMTSP8J1wa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Q24 Develop a code that prompts the user to input two sets of strings. Then, print the elements that are\n","present in the first set but not in the second set"],"metadata":{"id":"rTWkPsX-J-Nw"}},{"cell_type":"code","source":["\n","def set(prompt):\n","    return set(input(prompt).split(','))\n","\n","# Main function\n","def main():\n","    set1 = set(\"Enter the first set of strings: \")\n","    set2 = set(\"Enter the second set of strings: \")\n","    difference = set1 - set2\n","    print(\"Elements present in the first set but not in the second set:\", difference)\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"WlxGQAGHKI7u"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Q25.& Create a code that takes a tuple and two integers as input. The function should return a new tuple\n","containing elements from the original tuple within the specified range of indices"],"metadata":{"id":"PWLC1ZtQKXjO"}},{"cell_type":"code","source":["def slice_tuple(tpl, si, ei):# si =start_index and ei =end index\n","    return tpl[si:ei]\n","\n","\n","original_tuple = (10, 20, 30, 40, 50, 60, 70)\n","start = 2\n","end = 5\n","print(slice_tuple(original_tuple, start, end))\n"],"metadata":{"id":"NSlcrwn-KqyQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735374351483,"user_tz":-330,"elapsed":1668,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"90c9695b-46b4-4fc5-dc0f-a393a2f85873"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(30, 40, 50)\n"]}]},{"cell_type":"markdown","source":["  Q26 Write a code that prompts the user to input two sets of characters. Then, print the union of these two sets&"],"metadata":{"id":"6MJkM0-XYRhw"}},{"cell_type":"code","source":["\n","def g_set(prompt):\n","    return set(input(prompt).split(','))\n","\n","def main():\n","    set1 =g_set(\"Enter the first set of characters: \")\n","    set2 = g_set(\"Enter the second set of characters: \")\n","    union_set = set1 | set2\n","    print(\"Union:\", union_set)\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jY8yDqs8Y8zq","executionInfo":{"status":"ok","timestamp":1735375191032,"user_tz":-330,"elapsed":12644,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"a4f653ff-3ecd-4630-d29e-de0cb1ecda0d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the first set of characters: hello\n","Enter the second set of characters: world\n","Union: {'world', 'hello'}\n"]}]},{"cell_type":"markdown","source":["Q27. Develop a code that takes a tuple of integers as input. The function should return the maximum and\n","minimum values from the tuple using tuple unpacking"],"metadata":{"id":"g7VbfwmObHlr"}},{"cell_type":"code","source":["def find_max_min(tpl):\n","    max_value = max(tpl)\n","    min_value = min(tpl)\n","    return max_value, min_value\n","\n","# Test the function\n","input_tuple = (10, 20, 5, 40, 30)\n","max_val, min_val = find_max_min(input_tuple)\n","print(f\"Maximum: {max_val}, Minimum: {min_val}\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sv6dUayWbUXF","executionInfo":{"status":"ok","timestamp":1735375315740,"user_tz":-330,"elapsed":510,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"d79a9dcf-2f05-479a-def5-a45fd5a75358"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Maximum: 40, Minimum: 5\n"]}]},{"cell_type":"markdown","source":["Q28 .Create a code that defines two sets of integers. Then, print the union, intersection, and difference of these\n","two sets&\n"],"metadata":{"id":"EE1j8bvEbqHp"}},{"cell_type":"code","source":["def set_operations(set1, set2):\n","    union = set1 | set2\n","    intersection = set1 & set2\n","    difference = set1 - set2\n","    return union, intersection, difference\n","\n","\n","set1 = {1, 2, 3, 4, 5}\n","set2 = {4, 5, 6, 7, 8}\n","\n","union, intersection, difference = set_operations(set1, set2)\n","\n","\n","print(f\"Union: {union}\")\n","print(f\"Intersection: {intersection}\")\n","print(f\"Difference (set1 - set2): {difference}\")\n"],"metadata":{"id":"IYdSU7pQdf3L"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Q29.& Write a code that takes a tuple and an element as input. The function should return the count of\n","occurrences of the given element in the tuple&\n"],"metadata":{"id":"yP3Z1kRDesdf"}},{"cell_type":"code","source":["def count_tuple(tpl,element):\n"," return tpl.count(element)\n","input=(3,3,2,3,1,4,3)\n","element=3\n","#output:  4"],"metadata":{"id":"AijFlj5zexvu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"IOJjI8xlf2Wj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Q30. Develop a code that prompts the user to input two sets of strings. Then, print the symmetric difference of\n","these two sets"],"metadata":{"id":"FyD72zcFgFac"}},{"cell_type":"code","source":["# Function to get a set of strings from user input\n","def get_set(prompt):\n","    return set(input(prompt).split(','))\n","def main():\n","    set1 = get_set(\"Enter the first set of strings (separated by commas): \")\n","    set2 = get_set(\"Enter the second set of strings (separated by commas): \")\n","    symmetric_difference = set1 ^ set2\n","    print(\"Symmetric Difference:\", symmetric_difference)\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"id":"FUEzFQIYgPlb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Q31. Write a code that takes a list of words as input and returns a dictionary where the keys are unique words\n","and the values are the frequencies of those words in the input list&"],"metadata":{"id":"p_H8Q03WgXsV"}},{"cell_type":"code","source":["def word(word_list):\n","    return {word: word_list.count(word) for word in set(word_list)}\n","\n","# Test the function\n","L1 = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\"]\n","print(word(L1))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yj3ZSnYNgdM5","executionInfo":{"status":"ok","timestamp":1735376812014,"user_tz":-330,"elapsed":513,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"34679505-c142-4918-9553-c3a25ff2ec8a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'banana': 2, 'orange': 1, 'apple': 3}\n"]}]},{"cell_type":"markdown","source":["Q32 .Write a code that takes two dictionaries as input and merges them into a single dictionary. If there are\n","common keys, the values should be added together&\n"],"metadata":{"id":"e0aO610IhPvt"}},{"cell_type":"code","source":["def merge_dicts(dict1, dict2):\n","    for key, value in dict2.items():\n","        dict1[key] = dict1.get(key, 0) + value\n","    return dict1\n","\n","# Test the function\n","dict1 = {'a': 1, 'b': 2, 'c': 3}\n","dict2 = {'b': 3, 'c': 4, 'd': 5}\n","print(merge_dicts(dict1, dict2))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"swnyKDM-hXuc","executionInfo":{"status":"ok","timestamp":1735376927891,"user_tz":-330,"elapsed":586,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"68d78dd0-1af4-4f7d-91e1-ba31f8958f8d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': 1, 'b': 5, 'c': 7, 'd': 5}\n"]}]},{"cell_type":"markdown","source":["Q33. Write a code to access a value in a nested dictionary. The function should take the dictionary and a list of\n","keys as input, and return the corresponding value. If any of the keys do not exist in the dictionary, the\n","function should return None&\n"],"metadata":{"id":"DVrMPvr4iQli"}},{"cell_type":"code","source":["def get_nested_value(d, keys):\n","    for key in keys:\n","        if isinstance(d, dict) and key in d:\n","            d = d[key]\n","        else:\n","            return None\n","    return d\n","\n","# Test the function\n","nested_dict = {\n","    'a': {'b': {'c': 42}},\n","    'x': {'y': 100}\n","}\n","keys = ['a', 'b', 'c']\n","print(get_nested_value(nested_dict, keys))  # Output: 42\n","\n","keys = ['D', 'E', 'z']\n","print(get_nested_value(nested_dict, keys))  # Output: None\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0wWF5eWWiQHl","executionInfo":{"status":"ok","timestamp":1735377360119,"user_tz":-330,"elapsed":476,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"d2070f32-6d3c-4369-92a4-192467268448"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["42\n","None\n"]}]},{"cell_type":"markdown","source":["Q34. Write a code that takes a dictionary as input and returns a sorted version of it based on the values. You\n","can choose whether to sort in ascending or descending order&\n"],"metadata":{"id":"dmKpfUs_jTAb"}},{"cell_type":"code","source":["\n","\n","def sort_dict(d, ascending=True):\n","    return dict(sorted(d.items(), key=lambda item: item[1], reverse=not ascending))\n","\n","input_dict = {'a': 3, 'b': 1, 'c': 2}\n","print(sort_dict(input_dict))\n","print(sort_dict(input_dict, ascending=False))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fUMx6phLjbHM","executionInfo":{"status":"ok","timestamp":1735377665214,"user_tz":-330,"elapsed":1221,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"d0c37fb7-e13e-4e54-de02-29d13b74f901"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'b': 1, 'c': 2, 'a': 3}\n","{'a': 3, 'c': 2, 'b': 1}\n"]}]},{"cell_type":"markdown","source":["Q35 .Write a code that inverts a dictionary, swapping keys and values. Ensure that the inverted dictionary\n","correctly handles cases where multiple keys have the same value by storing the keys as a list in the inverted dictionary"],"metadata":{"id":"lxOjRuUXkETP"}},{"cell_type":"code","source":["def invert_dictionary(d):\n","    inverted_dict = {}\n","    for key, value in d.items():\n","        if value in inverted_dict:\n","            inverted_dict[value].append(key)\n","        else:\n","            inverted_dict[value] = [key]\n","    return inverted_dict\n","\n","input_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 3}\n","print(invert_dictionary(input_dict))\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tvV4VM6ZkNTd","executionInfo":{"status":"ok","timestamp":1735377643795,"user_tz":-330,"elapsed":758,"user":{"displayName":"Monika Rajpurohit","userId":"05678320793496040050"}},"outputId":"d24405e3-4b28-44d2-c951-f90c8ff62d34"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{1: ['a', 'c'], 2: ['b'], 3: ['d']}\n"]}]}]}